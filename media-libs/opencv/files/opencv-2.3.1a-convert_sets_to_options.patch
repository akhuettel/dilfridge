--- a/CMakeLists.txt	2011-11-07 00:58:06.809057699 +0100
+++ b/CMakeLists.txt	2011-11-07 00:55:38.921906543 +0100
@@ -18,7 +18,7 @@
     # Add these standard paths to the search paths for FIND_LIBRARY
     # to find libraries from these locations first
     if(UNIX)
-        set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /lib /usr/lib)
+        set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /lib${LIB_SUFFIX} /usr/lib${LIB_SUFFIX})
     endif()
 
     # it _must_ go before PROJECT(OpenCV) in order to work
@@ -72,13 +72,13 @@
 # Build static or dynamic libs?
 # Default: dynamic libraries
 # ----------------------------------------------------------------------------
-set(BUILD_SHARED_LIBS ON CACHE BOOL "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)")
+OPTION(BUILD_SHARED_LIBS "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)" ON)
 
 # ----------------------------------------------------------------------------
 # Include debug info into debug libs?
 # Default: yes
 # ----------------------------------------------------------------------------
-set(BUILD_WITH_DEBUG_INFO ON CACHE BOOL "Include debug info into debug libs")
+OPTION(BUILD_WITH_DEBUG_INFO "Include debug info into debug libs" ON)
 
 # ----------------------------------------------------------------------------
 #  Get actual OpenCV version number from sources
@@ -117,15 +117,15 @@
 
 # SUBDIRECTORIES:
 # Save libs and executables in the same place
-set(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib" CACHE PATH "Output directory for libraries" )
+set(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib${LIB_SUFFIX}" CACHE PATH "Output directory for libraries" )
 set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin" CACHE PATH "Output directory for applications" )
 
 if(ANDROID OR WIN32)
     set(OPENCV_DOC_INSTALL_PATH doc)
 elseif(OPENCV_MANGLED_INSTALL_PATHS)
-    set(OPENCV_DOC_INSTALL_PATH share/OpenCV-${OPENCV_VERSION}/doc)
+    set(OPENCV_DOC_INSTALL_PATH share/doc/opencv-${OPENCV_VERSION}/)
 else()
-    set(OPENCV_DOC_INSTALL_PATH share/OpenCV/doc)
+    set(OPENCV_DOC_INSTALL_PATH share/doc/opencv-${OPENCV_VERSION}/ CACHE PATH "Directory for documentation to install (without prefix)")
 endif()
 
 if(ANDROID)
@@ -318,23 +318,23 @@
 
 # Build/install (or not) some apps:
 # ===================================================
-set(BUILD_EXAMPLES OFF CACHE BOOL "Build all examples")
-set(INSTALL_C_EXAMPLES OFF CACHE BOOL "Install C examples")
-set(INSTALL_PYTHON_EXAMPLES OFF CACHE BOOL "Install Python examples")
+option(BUILD_EXAMPLES "Build all examples" OFF)
+option(INSTALL_C_EXAMPLES "Install C examples" OFF)
+option(INSTALL_PYTHON_EXAMPLES "Install Python examples" OFF)
 if(ANDROID)
     set(INSTALL_ANDROID_EXAMPLES OFF CACHE BOOL "Install Android examples")
 endif()
 
 # Build tests:
 # ===================================================
-set(BUILD_TESTS ON CACHE BOOL "Build tests")
+option(BUILD_TESTS "Build tests" ON)
 
 # Build 3rdparty libraries under unix
 # ===================================================
 if(WIN32)
-    set(OPENCV_BUILD_3RDPARTY_LIBS TRUE  CACHE BOOL "Build 3rd party libraries")
+    option(OPENCV_BUILD_3RDPARTY_LIBS "Build 3rd party libraries" TRUE)
 else()
-    set(OPENCV_BUILD_3RDPARTY_LIBS FALSE CACHE BOOL "Build 3rd party libraries")
+    option(OPENCV_BUILD_3RDPARTY_LIBS "Build 3rd party libraries" FALSE)
 endif()
 
 include(OpenCVPCHSupport.cmake REQUIRED)
@@ -356,8 +356,8 @@
 endif()
 
 if(CMAKE_COMPILER_IS_GNUCXX)
-    set(ENABLE_PROFILING OFF CACHE BOOL "Enable profiling in the GCC compiler (Add flags: -g -pg)")
-    set(USE_OMIT_FRAME_POINTER ON CACHE BOOL "Enable -fomit-frame-pointer for GCC")
+    option(ENABLE_PROFILING "Enable profiling in the GCC compiler (Add flags: -g -pg)" OFF)
+    option(USE_OMIT_FRAME_POINTER "Enable -fomit-frame-pointer for GCC" ON)
 
     if(${CMAKE_SYSTEM_PROCESSOR} MATCHES amd64.*|x86_64.*)
         set(X86_64 1)
@@ -376,59 +376,58 @@
         #ELSE()
         #    SET(_USE_FAST_MATH ON)
         #ENDIF()
-        set(USE_FAST_MATH ${_USE_FAST_MATH} CACHE BOOL "Enable -ffast-math (not recommended for GCC 4.6.x)")
-        set(ENABLE_SSE ON CACHE BOOL "Enable SSE instructions")
-        set(ENABLE_SSE2 ON CACHE BOOL "Enable SSE2 instructions")
-        set(ENABLE_SSE3 OFF CACHE BOOL "Enable SSE3 instructions")
-        set(ENABLE_SSSE3 OFF CACHE BOOL "Enable SSSE3 instructions")
-        set(ENABLE_SSE41 OFF CACHE BOOL "Enable SSE4.1 instructions")
-        set(ENABLE_SSE42 OFF CACHE BOOL "Enable SSE4.2 instructions")
+        option(USE_FAST_MATH "Enable -ffast-math for GCC" ON)
+        option(ENABLE_SSE "Enable SSE instructions" ON)
+        option(ENABLE_SSE2 "Enable SSE2 instructions" ON)
+        option(ENABLE_SSE3 "Enable SSE3 instructions" OFF)
+        option(ENABLE_SSSE3 "Enable SSSE3 instructions" OFF)
+        option(ENABLE_SSE41 "Enable SSE4.1 instructions" OFF)
+        option(ENABLE_SSE42 "Enable SSE4.2 instructions" OFF)
     endif()
 endif()
 
 if(MSVC)
-    set(ENABLE_SSE ON CACHE BOOL "Enable SSE instructions for MSVC")
-    set(ENABLE_SSE2 ON CACHE BOOL "Enable SSE2 instructions for MSVC")
+    option(ENABLE_SSE "Enable SSE instructions for MSVC" ON)
+    option(ENABLE_SSE2 "Enable SSE2 instructions for MSVC" ON)
     if(CMAKE_C_COMPILER MATCHES "icc")
-        set(ENABLE_SSE3 OFF CACHE BOOL "Enable SSE3 instructions for ICC")
-        set(ENABLE_SSE4_1 OFF CACHE BOOL "Enable SSE4.1 instructions for ICC")
+        option(ENABLE_SSE3 "Enable SSE3 instructions for ICC" OFF)
+        option(ENABLE_SSE4_1 "Enable SSE4.1 instructions for ICC" OFF)
     endif()
 endif()
 
 # allow fine grained control over which libraries not to link, even if
 # they are available on the system
 # ====================================================================
-set(WITH_PNG ON CACHE BOOL "Include PNG support")
-set(WITH_JPEG ON CACHE BOOL "Include JPEG support")
-set(WITH_JASPER ON CACHE BOOL "Include JPEG2K support")
-set(WITH_TIFF ON CACHE BOOL "Include TIFF support")
-set(WITH_OPENEXR ON CACHE BOOL "Include ILM support via OpenEXR")
+option(WITH_PNG "Include PNG support" ON)
+option(WITH_JPEG "Include JPEG support" ON)
+option(WITH_JASPER "Include JPEG2K support" ON)
+option(WITH_TIFF "Include TIFF support" ON)
+option(WITH_OPENEXR "Include ILM support via OpenEXR" ON)
 
 if(UNIX)
-    set(WITH_FFMPEG ON CACHE BOOL "Include FFMPEG support")
+    option(WITH_FFMPEG "Include FFMPEG support" ON)
     if(NOT APPLE)
-        set(WITH_UNICAP OFF CACHE BOOL "Include Unicap support (GPL)")
-        set(WITH_GTK ON CACHE BOOL "Include GTK support")
-        set(WITH_GSTREAMER ON CACHE BOOL "Include Gstreamer support")
-        set(WITH_V4L ON CACHE BOOL "Include Video 4 Linux support")
-        set(WITH_XINE OFF CACHE BOOL "Include Xine support (GPL)")
+        option(WITH_UNICAP "Include Unicap support (GPL)" OFF)
+        option(WITH_GTK "Include GTK support" ON)
+        option(WITH_GSTREAMER "Include Gstreamer support" ON)
+        option(WITH_V4L "Include Video 4 Linux support" ON)
+        option(WITH_XINE "Include Xine support (GPL)" OFF)
     endif()
-    set(WITH_PVAPI ON CACHE BOOL "Include Prosilica GigE support")
-    set(WITH_1394 ON CACHE BOOL "Include IEEE1394 support")
+    option(WITH_PVAPI "Include Prosilica GigE support" ON)
+    option(WITH_1394 "Include IEEE1394 support" ON)
 endif()
 
 if(APPLE)
-    set(WITH_CARBON OFF CACHE BOOL "Use Carbon for UI instead of Cocoa")
-    set(WITH_QUICKTIME OFF CACHE BOOL "Use QuickTime for Video I/O insted of QTKit")
+    option(WITH_CARBON "Use Carbon for UI instead of Cocoa" OFF)
+    option(WITH_QUICKTIME "Use QuickTime for Video I/O insted of QTKit" OFF)
 endif()
 
-set(WITH_TBB OFF CACHE BOOL "Include Intel TBB support")
-set(WITH_IPP OFF CACHE BOOL "Include Intel IPP support")
-set(WITH_EIGEN ON CACHE BOOL "Include Eigen2/Eigen3 support")
-set(WITH_CUDA ON CACHE BOOL "Include NVidia Cuda Runtime support")
-
-set(WITH_OPENNI OFF CACHE BOOL "Include OpenNI support")
-set(WITH_XIMEA OFF CACHE BOOL "Include XIMEA cameras support")
+option(WITH_TBB "Include TBB support" OFF)
+option(WITH_IPP "Include Intel IPP support" OFF)
+option(WITH_EIGEN "Include Eigen2/Eigen3 support" ON)
+option(WITH_CUDA "Include NVidia Cuda Runtime support" ON)
+ 
+option(WITH_OPENNI "Include OpenNI support" OFF)
 
 # ===================================================
 # Macros that checks if module have been installed.
@@ -626,13 +625,13 @@
     include(OpenCVFindOpenEXR.cmake)
 endif()
 
-set(BUILD_DOCS ON CACHE BOOL "Build OpenCV Documentation")
+option(BUILD_DOCS "Build OpenCV Documentation" ON)
 
 if(BUILD_DOCS)
   include(OpenCVFindLATEX.cmake REQUIRED)
 endif()
 
-set(BUILD_NEW_PYTHON_SUPPORT ON CACHE BOOL "Build with Python support")
+option(BUILD_NEW_PYTHON_SUPPORT "Build with Python support" ON)
 
 if (WIN32)
     if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
@@ -665,9 +664,9 @@
                     OUTPUT_VARIABLE PYTHON_STD_PACKAGES_PATH
                     OUTPUT_STRIP_TRAILING_WHITESPACE)
     if("${PYTHON_STD_PACKAGES_PATH}" MATCHES "site-packages")
-        set(PYTHON_PACKAGES_PATH lib/python${PYTHON_VERSION_MAJOR_MINOR}/site-packages CACHE PATH "Where to install the python packages.")
+        set(PYTHON_PACKAGES_PATH lib${LIB_SUFFIX}/python${PYTHON_VERSION_MAJOR_MINOR}/site-packages CACHE PATH "Where to install the python packages.")
     else() #debian based assumed, install to the dist-packages.
-        set(PYTHON_PACKAGES_PATH lib/python${PYTHON_VERSION_MAJOR_MINOR}/dist-packages CACHE PATH "Where to install the python packages.")
+        set(PYTHON_PACKAGES_PATH lib${LIB_SUFFIX}/python${PYTHON_VERSION_MAJOR_MINOR}/dist-packages CACHE PATH "Where to install the python packages.")
     endif()
 endif()
 if(CMAKE_HOST_WIN32)
@@ -836,8 +835,8 @@
 #YV
 ############################### QT ################################
 
-set(WITH_QT OFF CACHE BOOL "Build with Qt Backend support")
-set(WITH_QT_OPENGL OFF CACHE BOOL "Add OpenGL extension to Qt")
+option(WITH_QT "Build with Qt Backend support" OFF)
+option(WITH_QT_OPENGL "Add OpenGL extension to Qt" OFF)
 
 set(HAVE_QT 0)
 set(HAVE_QT_OPENGL 0)
@@ -1054,7 +1053,7 @@
 ################## Extra HighGUI libs on Windows ###################
 
 if(WIN32)
-    set(WITH_VIDEOINPUT ON CACHE BOOL "Build HighGUI with DirectShow support")
+    option(WITH_VIDEOINPUT "Build HighGUI with DirectShow support" ON)
     set(HIGHGUI_LIBRARIES ${HIGHGUI_LIBRARIES} comctl32 gdi32 ole32)
 
     if(WITH_VIDEOINPUT)
@@ -1123,7 +1122,7 @@
 #           Set the maximum level of warnings:
 # ----------------------------------------------------------------------------
 # Should be set to true for development
-set(OPENCV_WARNINGS_ARE_ERRORS OFF CACHE BOOL "Treat warnings as errors")
+option(OPENCV_WARNINGS_ARE_ERRORS "Treat warnings as errors" OFF)
 if (WIN32 AND ${CMAKE_GENERATOR} MATCHES "(MinGW)|(MSYS)")
     set(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG" CACHE STRING "")
 endif()
@@ -1347,12 +1346,12 @@
 set(CMAKE_OPENCV2_INCLUDE_DIRS_CONFIGCMAKE "")
 if(ANDROID)
     set(CMAKE_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/libs/\${ARMEABI_NDK_NAME}\"")
-    set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/share/OpenCV/3rdparty/libs/\${ARMEABI_NDK_NAME}\"")
+    set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/share/opencv/3rdparty/libs/\${ARMEABI_NDK_NAME}\"")
 else()
     set(CMAKE_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/${OPENCV_LIB_INSTALL_PATH}\"")
-    set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/share/OpenCV/3rdparty/${OPENCV_LIB_INSTALL_PATH}\"")
+    set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/share/opencv/3rdparty/${OPENCV_LIB_INSTALL_PATH}\"")
     if(OPENCV_MANGLED_INSTALL_PATHS)
-      set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/share/OpenCV-${OPENCV_VERSION}/3rdparty/${OPENCV_LIB_INSTALL_PATH}\"")
+      set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_INSTALL_PATH}/share/opencv-${OPENCV_VERSION}/3rdparty/${OPENCV_LIB_INSTALL_PATH}\"")
     endif()
 endif()
 
@@ -1367,16 +1366,16 @@
   #                <prefix>/(share|lib)/<name>*/                           (U)
   #                <prefix>/(share|lib)/<name>*/(cmake|CMake)/             (U)
   if(OPENCV_MANGLED_INSTALL_PATHS)
-    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig.cmake DESTINATION share/OpenCV-${OPENCV_VERSION}/)
-    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig-version.cmake DESTINATION share/OpenCV-${OPENCV_VERSION}/)
+    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig.cmake DESTINATION share/opencv-${OPENCV_VERSION}/)
+    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig-version.cmake DESTINATION share/opencv-${OPENCV_VERSION}/)
   else()
-    install(FILES "${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig.cmake" DESTINATION share/OpenCV/)
-    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig-version.cmake DESTINATION share/OpenCV/)
+    install(FILES "${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig.cmake" DESTINATION share/opencv/)
+    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCVConfig-version.cmake DESTINATION share/opencv/)
   endif()
 endif()
 
 if(ANDROID)
-    install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/android/android.toolchain.cmake" DESTINATION share/OpenCV)
+    install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/android/android.toolchain.cmake" DESTINATION share/opencv)
 endif()
 
 # --------------------------------------------------------------------------------------------
@@ -1386,7 +1385,7 @@
     set(CMAKE_INCLUDE_DIRS_CONFIGCMAKE "\"\${OpenCV_CONFIG_PATH}/include\" \"\${OpenCV_CONFIG_PATH}/include/opencv\"")
     set(CMAKE_OPENCV2_INCLUDE_DIRS_CONFIGCMAKE "")
     set(CMAKE_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_CONFIG_PATH}/${OPENCV_LIB_INSTALL_PATH}\"")
-    set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_CONFIG_PATH}/share/OpenCV/3rdparty/${OPENCV_LIB_INSTALL_PATH}\"")
+    set(CMAKE_3RDPARTY_LIB_DIRS_CONFIGCMAKE "\"\${OpenCV_CONFIG_PATH}/share/opencv/3rdparty/${OPENCV_LIB_INSTALL_PATH}\"")
 
     exec_program(mkdir ARGS "-p \"${CMAKE_BINARY_DIR}/win-install/\"" OUTPUT_VARIABLE RET_VAL)
     configure_file("${CMAKE_CURRENT_SOURCE_DIR}/OpenCVConfig.cmake.in" "${CMAKE_BINARY_DIR}/win-install/OpenCVConfig.cmake" IMMEDIATE @ONLY)
@@ -1439,7 +1438,7 @@
     set(CMAKE_LIBS_DIR_CONFIGCMAKE "\$(OPENCV_THIS_DIR)/../..")
 
     configure_file("${CMAKE_CURRENT_SOURCE_DIR}/OpenCV.mk.in" "${CMAKE_BINARY_DIR}/unix-install/OpenCV.mk" IMMEDIATE @ONLY)
-    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCV.mk DESTINATION share/OpenCV/)
+    install(FILES ${CMAKE_BINARY_DIR}/unix-install/OpenCV.mk DESTINATION share/opencv/)
 endif(ANDROID)
 
 # --------------------------------------------------------------------------------------------
@@ -1494,7 +1493,7 @@
 #-----------------------------------
 # Source package:
 #-----------------------------------
-set(BUILD_PACKAGE ON CACHE BOOL "Enables 'make package_source' command")
+option(BUILD_PACKAGE "Build a installer with the SDK" ON)
 
 if(BUILD_PACKAGE)
     set(TARBALL_NAME "${CMAKE_PROJECT_NAME}-${OPENCV_VERSION_MAJOR}.${OPENCV_VERSION_MINOR}.${OPENCV_VERSION_PATCH}")
--- a/modules/gpu/CMakeLists.txt	2011-09-12 20:42:20.000000000 +0200
+++ b/modules/gpu/CMakeLists.txt	2011-11-06 22:34:09.318041197 +0100
@@ -113,7 +113,7 @@
     DEBUG_POSTFIX "${OPENCV_DEBUG_POSTFIX}"
     ARCHIVE_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH}
     RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}
-    INSTALL_NAME_DIR lib
+    INSTALL_NAME_DIR lib${LIB_SUFFIX}
     )
 
 # Add the required libraries for linking:
@@ -141,8 +141,8 @@
 
 install(TARGETS ${the_target}
 	RUNTIME DESTINATION bin COMPONENT main
-	LIBRARY DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main
-	ARCHIVE DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main)
+	LIBRARY DESTINATION lib${LIB_SUFFIX} COMPONENT main
+	ARCHIVE DESTINATION lib${LIB_SUFFIX} COMPONENT main)
 
 install(FILES ${lib_hdrs}
 	DESTINATION ${OPENCV_INCLUDE_PREFIX}/opencv2/${name}
--- a/modules/highgui/CMakeLists.txt	2011-09-12 20:41:29.000000000 +0200
+++ b/modules/highgui/CMakeLists.txt	2011-11-06 22:30:32.093756873 +0100
@@ -294,7 +294,7 @@
     DEBUG_POSTFIX "${OPENCV_DEBUG_POSTFIX}"
     ARCHIVE_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH}
     RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}
-    INSTALL_NAME_DIR lib
+    INSTALL_NAME_DIR lib${LIB_SUFFIX}
     LINK_INTERFACE_LIBRARIES ""
     )
 
@@ -361,8 +361,8 @@
 
 install(TARGETS ${the_target}
     RUNTIME DESTINATION bin COMPONENT main
-    LIBRARY DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main
-    ARCHIVE DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main)
+    LIBRARY DESTINATION lib${LIB_SUFFIX} COMPONENT main
+    ARCHIVE DESTINATION lib${LIB_SUFFIX} COMPONENT main)
 
 install(FILES ${highgui_ext_hdrs}
         DESTINATION ${OPENCV_INCLUDE_PREFIX}/opencv2/highgui
--- a/data/CMakeLists.txt       2011-11-07 00:26:20.846885505 +0100
+++ b/data/CMakeLists.txt       2011-11-07 00:30:43.967596042 +0100
@@ -2,6 +2,6 @@
 file(GLOB LBP_CASCADES lbpcascades/*.xml)
 
 if(NOT WIN32)
-install(FILES ${HAAR_CASCADES} DESTINATION share/OpenCV/haarcascades COMPONENT main)
-install(FILES ${LBP_CASCADES} DESTINATION share/OpenCV/lbpcascades COMPONENT main)
+    install(FILES ${HAAR_CASCADES} DESTINATION share/opencv/haarcascades COMPONENT main)
+    install(FILES ${LBP_CASCADES} DESTINATION share/opencv/lbpcascades COMPONENT main)
 endif()
--- a/OpenCVModule.cmake	2011-09-12 20:45:38.000000000 +0200
+++ b/OpenCVModule.cmake	2011-11-06 22:26:31.197768487 +0100
@@ -83,7 +83,7 @@
         DEBUG_POSTFIX "${OPENCV_DEBUG_POSTFIX}"
         ARCHIVE_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_PATH}
         RUNTIME_OUTPUT_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}
-        INSTALL_NAME_DIR lib
+        INSTALL_NAME_DIR lib${LIB_SUFFIX}
         )
 
     add_opencv_precompiled_headers(${the_target})
@@ -107,8 +107,8 @@
 
     install(TARGETS ${the_target}
         RUNTIME DESTINATION bin COMPONENT main
-        LIBRARY DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main
-        ARCHIVE DESTINATION ${OPENCV_LIB_INSTALL_PATH} COMPONENT main)
+        LIBRARY DESTINATION lib${LIB_SUFFIX} COMPONENT main
+        ARCHIVE DESTINATION lib${LIB_SUFFIX} COMPONENT main)
 
     install(FILES ${lib_hdrs}
         DESTINATION ${OPENCV_INCLUDE_PREFIX}/opencv2/${name}
